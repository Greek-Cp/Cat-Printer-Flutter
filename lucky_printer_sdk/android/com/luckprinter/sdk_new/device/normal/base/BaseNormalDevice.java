/*  1 */ package com.luckprinter.sdk_new.device.normal.base;public class BaseNormalDevice extends BaseDevice implements INormalDeviceOperation { private int enablePrinterMode; private int endLineDot; private boolean isCompress; private boolean isTagNeedAdjustPaper; private int compressWay; public void printerModelLuck(ResultCallback<String> paramResultCallback) { byte[] arrayOfByte; (arrayOfByte = new byte[4])[0] = 16; (new byte[4])[1] = -1; (new byte[4])[2] = 32; (new byte[4])[3] = -16; d.b().a(paramArrayOfbyte -> { if (paramResultCallback != null) if (paramArrayOfbyte != null) { String str; setModel(str = byteToString(paramArrayOfbyte).trim()); paramResultCallback.onSuccess(this); } else { paramResultCallback.onFail(); }   }this); } public void printerSNLuck(ResultCallback<String> paramResultCallback) { byte[] arrayOfByte; (arrayOfByte = new byte[4])[0] = 16; (new byte[4])[1] = -1; (new byte[4])[2] = 32; (new byte[4])[3] = -14; d.b().a(paramArrayOfbyte -> { if (paramResultCallback != null) if (paramArrayOfbyte != null) { String str; setSn(str = byteToString(paramArrayOfbyte).trim()); paramResultCallback.onSuccess(this); } else { paramResultCallback.onFail(); }   }this); } public void printerVersionLuck(ResultCallback<String> paramResultCallback) { byte[] arrayOfByte; (arrayOfByte = new byte[4])[0] = 16; (new byte[4])[1] = -1; (new byte[4])[2] = 32; (new byte[4])[3] = -15; d.b().a(paramArrayOfbyte -> { if (paramResultCallback != null) if (paramArrayOfbyte != null) { String str; setVersion(str = byteToString(paramArrayOfbyte).trim()); paramResultCallback.onSuccess(this); } else { paramResultCallback.onFail(); }   }this); } public void getDeviceBoot(ResultCallback<String> paramResultCallback) { byte[] arrayOfByte; (arrayOfByte = new byte[4])[0] = 16; (new byte[4])[1] = -1; (new byte[4])[2] = 32; (new byte[4])[3] = -17; d.b().a(paramArrayOfbyte -> { if (paramResultCallback != null) if (paramArrayOfbyte != null) { paramResultCallback.onSuccess(byteToString(paramArrayOfbyte)); } else { paramResultCallback.onFail(); }   }this); } public void getShutTimeLuck(ResultCallback<Integer> paramResultCallback) { byte[] arrayOfByte; (arrayOfByte = new byte[3])[0] = 16; (new byte[3])[1] = -1; (new byte[3])[2] = 19; d.b().a(paramArrayOfbyte -> { if (paramResultCallback != null) if (paramArrayOfbyte != null && paramArrayOfbyte.length > 0) { paramResultCallback.onSuccess(Integer.valueOf((paramArrayOfbyte.length == 2) ? paramArrayOfbyte[1] : paramArrayOfbyte[0])); } else { paramResultCallback.onFail(); }   }this); } public void printerStatusLuck(ResultCallback<PrinterStatusData> paramResultCallback) { byte[] arrayOfByte; (arrayOfByte = new byte[3])[0] = 16; (new byte[3])[1] = -1; (new byte[3])[2] = 64; d.b().a(paramArrayOfbyte -> { if (paramResultCallback != null) { byte b; if (paramArrayOfbyte != null) { b = (byte)(paramArrayOfbyte[0] & 0x1); byte b1 = (byte)(paramArrayOfbyte[0] >> 1 & 0x1); byte b2 = (byte)(paramArrayOfbyte[0] >> 2 & 0x1); byte b3 = (byte)(paramArrayOfbyte[0] >> 3 & 0x1); byte b4 = (byte)(paramArrayOfbyte[0] >> 4 & 0x1); byte b5 = (byte)(paramArrayOfbyte[0] >> 5 & 0x1); this(); printerStatusData.setIsPrinting(b); printerStatusData.setIsOpen(b1); printerStatusData.setIsLackPaper(b2); printerStatusData.setIsLackElec(b3); printerStatusData.setIsOverheat(b4); PrinterStatusData printerStatusData; (printerStatusData = new PrinterStatusData()).setIsRecharge(b5); paramResultCallback.onSuccess(new PrinterStatusData()); } else { b.onFail(); }  }  }this); } public void getBatteryLuck(ResultCallback<Integer> paramResultCallback) { byte[] arrayOfByte; (arrayOfByte = new byte[4])[0] = 16; (new byte[4])[1] = -1; (new byte[4])[2] = 80; (new byte[4])[3] = -15; d.b().a(paramArrayOfbyte -> { if (paramResultCallback != null) { byte b; if (paramArrayOfbyte != null && paramArrayOfbyte.length >= 2) { b = paramArrayOfbyte[1]; paramResultCallback.onSuccess(Integer.valueOf(paramArrayOfbyte[0] * 16 + b)); } else { b.onFail(); }  }  }this); } public void getDensityLuck(ResultCallback<Integer> paramResultCallback) { byte[] arrayOfByte; (arrayOfByte = new byte[3])[0] = 16; (new byte[3])[1] = -1; (new byte[3])[2] = 17; d.b().a(paramArrayOfbyte -> { if (paramResultCallback != null) if (paramArrayOfbyte != null && paramArrayOfbyte.length > 0) { paramResultCallback.onSuccess(Integer.valueOf(formatGetDensity(paramArrayOfbyte[0]))); } else { paramResultCallback.onFail(); }   }this); } public void setDensityLuck(int paramInt, ResultCallback<Integer> paramResultCallback) { paramInt = formatSetDensity(paramInt);
/*  2 */     byte b = (byte)paramInt; byte[] arrayOfByte; (arrayOfByte = new byte[5])[0] = 16; (new byte[5])[1] = -1; (new byte[5])[2] = 16; (new byte[5])[3] = 0; (new byte[5])[4] = b; d.b().a(paramArrayOfbyte -> { if (paramResultCallback != null) if (paramArrayOfbyte != null) { if (byteToString(paramArrayOfbyte).equals("OK")) { paramResultCallback.onSuccess(Integer.valueOf(1)); } else { paramResultCallback.onFail(); }  } else { paramResultCallback.onFail(); }   }arrayOfByte); } public void sendCommand(byte[] paramArrayOfbyte, ResultCallback<Integer> paramResultCallback) { d.b().a(paramArrayOfbyte -> { if (paramResultCallback != null) if (paramArrayOfbyte != null) { if (byteToString(paramArrayOfbyte).equals("OK")) { paramResultCallback.onSuccess(Integer.valueOf(1)); } else { paramResultCallback.onFail(); }  } else { paramResultCallback.onFail(); }   }paramArrayOfbyte); } public void setShutTimeLuck(int paramInt, ResultCallback<Integer> paramResultCallback) { byte b = (byte)(paramInt / 256); paramInt = (byte)(paramInt % 256); byte[] arrayOfByte; (arrayOfByte = new byte[5])[0] = 16; (new byte[5])[1] = -1; (new byte[5])[2] = 18; (new byte[5])[3] = b; (new byte[5])[4] = paramInt; d.b().a(paramArrayOfbyte -> { if (paramResultCallback != null) if (paramArrayOfbyte != null) { if (byteToString(paramArrayOfbyte).equals("OK")) { paramResultCallback.onSuccess(Integer.valueOf(1)); } else { paramResultCallback.onFail(); }  } else { paramResultCallback.onFail(); }   }arrayOfByte); } public void setRecoveryLuck(ResultCallback<Integer> paramResultCallback) { byte[] arrayOfByte; (arrayOfByte = new byte[3])[0] = 16; (new byte[3])[1] = -1; (new byte[3])[2] = 4; d.b().a(paramArrayOfbyte -> { if (paramResultCallback != null) if (paramArrayOfbyte != null) { if (byteToString(paramArrayOfbyte).equals("OK")) { paramResultCallback.onSuccess(Integer.valueOf(1)); } else { paramResultCallback.onFail(); }  } else { paramResultCallback.onFail(); }   }this); } public void enablePrinterLuck() { byte b = (byte)this.enablePrinterMode; byte[] arrayOfByte; (arrayOfByte = new byte[4])[0] = 16; (new byte[4])[1] = -1; (new byte[4])[2] = -15; (new byte[4])[3] = b; d.b().a(null, arrayOfByte); }
/*    */   public void stopPrintJobLuckNoCallback() { byte[] arrayOfByte; (arrayOfByte = new byte[4])[0] = 16; (new byte[4])[1] = -1; (new byte[4])[2] = -15; (new byte[4])[3] = 69; d.b().a(null, this); }
/*    */   public void printLineDotsLuck(int paramInt) { byte b = (byte)paramInt; byte[] arrayOfByte; (arrayOfByte = new byte[3])[0] = 27; (new byte[3])[1] = 74; (new byte[3])[2] = b; d.b().a(null, arrayOfByte); }
/*    */   public void printReverseLineDotsLuck(int paramInt) { byte b = (byte)paramInt; byte[] arrayOfByte; (arrayOfByte = new byte[4])[0] = 31; (new byte[4])[1] = 17; (new byte[4])[2] = 17; (new byte[4])[3] = b; d.b().a(null, arrayOfByte); }
/*    */   public void printerPositionLuck() { byte[] arrayOfByte; (arrayOfByte = new byte[2])[0] = 29; (new byte[2])[1] = 12; d.b().a(null, this); }
/*    */   public void printerWakeupLuck() { byte[] arrayOfByte; (arrayOfByte = new byte[12])[0] = 0; (new byte[12])[1] = 0; (new byte[12])[2] = 0; (new byte[12])[3] = 0; (new byte[12])[4] = 0; (new byte[12])[5] = 0; (new byte[12])[6] = 0; (new byte[12])[7] = 0; (new byte[12])[8] = 0; (new byte[12])[9] = 0; (new byte[12])[10] = 0; (new byte[12])[11] = 0; d.b().a(null, this); }
/*    */   public void printerSetWidth(int paramInt) { byte b = (byte)(paramInt % 256); paramInt = (byte)(paramInt / 256); byte[] arrayOfByte; (arrayOfByte = new byte[5])[0] = 16; (new byte[5])[1] = -1; (new byte[5])[2] = 21; (new byte[5])[3] = b; (new byte[5])[4] = paramInt; d.b().a(null, arrayOfByte); }
/*    */   public void setHeatingLevel(int paramInt, ResultCallback<Integer> paramResultCallback) { byte b = (byte)paramInt; byte[] arrayOfByte; (arrayOfByte = new byte[4])[0] = 31; (new byte[4])[1] = 112; (new byte[4])[2] = 1; (new byte[4])[3] = b; d.b().a(paramArrayOfbyte -> { if (paramResultCallback != null) if (paramArrayOfbyte != null) { if (byteToString(paramArrayOfbyte).startsWith("OK")) { paramResultCallback.onSuccess(Integer.valueOf(1)); } else { paramResultCallback.onFail(); }  } else { paramResultCallback.onFail(); }   }arrayOfByte); }
/*    */   public void setPrinterMode(int paramInt, ResultCallback<Integer> paramResultCallback) { byte b = (byte)paramInt; byte[] arrayOfByte; (arrayOfByte = new byte[5])[0] = 16; (new byte[5])[1] = -1; (new byte[5])[2] = 48; (new byte[5])[3] = 39; (new byte[5])[4] = b; d.b().a(paramArrayOfbyte -> { if (paramResultCallback != null) if (paramArrayOfbyte != null) { if (byteToString(paramArrayOfbyte).startsWith("OK")) { paramResultCallback.onSuccess(Integer.valueOf(1)); } else { paramResultCallback.onFail(); }  } else { paramResultCallback.onFail(); }   }arrayOfByte); }
/*    */   public void setPaperType(int paramInt1, int paramInt2, ResultCallback<Integer> paramResultCallback) { super(this, paramResultCallback); ReadDataCallback readDataCallback; doSetPaperType(paramInt1, paramInt2, readDataCallback); }
/* 12 */   public void setPaperTypeNoCallback(int paramInt1, int paramInt2) { doSetPaperType(paramInt1, paramInt2, null); } public void stopPrintJobLuck(ResultCallback<Integer> paramResultCallback) { super(this); IReceiveDataClaud iReceiveDataClaud; d d = d.b(); byte[] arrayOfByte; (arrayOfByte = new byte[4])[0] = 16; (new byte[4])[1] = -1; (new byte[4])[2] = -15; (new byte[4])[3] = 69; ReadDataCallback readDataCallback = paramArrayOfbyte -> { if (paramResultCallback != null) if (paramIReceiveDataClaud.isFilter(paramArrayOfbyte)) { paramResultCallback.onSuccess(Integer.valueOf(1)); } else { paramResultCallback.onFail(); }   }; byte b = 60; this
/* 13 */       .a
/* 14 */       .b(iReceiveDataClaud, arrayOfByte, readDataCallback, b); }
/* 15 */   public void adjustPositionAuto(int paramInt) { byte b = (byte)paramInt; byte[] arrayOfByte; (arrayOfByte = new byte[3])[0] = 31; (new byte[3])[1] = 17; (new byte[3])[2] = b; d.b().a(null, arrayOfByte); } public void getSpeedLuck(ResultCallback<Integer> paramResultCallback) { byte[] arrayOfByte; (arrayOfByte = new byte[4])[0] = 16; (new byte[4])[1] = -1; (new byte[4])[2] = 32; (new byte[4])[3] = -96; d.b().a(paramArrayOfbyte -> { if (paramResultCallback != null) if (paramArrayOfbyte != null && paramArrayOfbyte.length > 0) { paramResultCallback.onSuccess(Integer.valueOf(paramArrayOfbyte[0] & 0xFF)); } else { paramResultCallback.onFail(); }   }this); } public void setSpeedLuck(int paramInt, ResultCallback<Integer> paramResultCallback) { byte b = (byte)paramInt; byte[] arrayOfByte; (arrayOfByte = new byte[4])[0] = 16; (new byte[4])[1] = -1; (new byte[4])[2] = -64; (new byte[4])[3] = b; d.b().a(paramArrayOfbyte -> { if (paramResultCallback != null) if (paramArrayOfbyte != null) { if (byteToString(paramArrayOfbyte).startsWith("OK")) { paramResultCallback.onSuccess(Integer.valueOf(1)); } else { paramResultCallback.onFail(); }  } else { paramResultCallback.onFail(); }   }arrayOfByte); } public void updatePrinterLuck(File paramFile, UpdateListener paramUpdateListener) { if (paramFile == null || !paramFile.exists()) return;  super(this, paramFile, paramUpdateListener); Runnable runnable; (d.b()).a.a(runnable); } public void print(Bitmap paramBitmap, int paramInt, ResultPageCallback<Integer> paramResultPageCallback) { OnDoPrintCallback onDoPrintCallback = (paramInt2, paramResultCallback) -> printOnce(paramBitmap, paramInt2, paramInt1, paramResultCallback); doPrint(paramBitmap, paramInt, paramResultPageCallback, this); } public void printOnce(Bitmap paramBitmap, int paramInt1, int paramInt2, ResultCallback<Integer> paramResultCallback) { enablePrinterLuck(); printerWakeupLuck(); sendBitmap(paramBitmap); printLineDotsLuck(this.endLineDot); stopPrintJobLuck(paramResultCallback); } public void printTag(Bitmap paramBitmap, int paramInt, ResultPageCallback<Integer> paramResultPageCallback) { OnDoPrintCallback onDoPrintCallback = (paramInt2, paramResultCallback) -> printTagOnce(paramBitmap, paramInt2, paramInt1, paramResultCallback); doPrint(paramBitmap, paramInt, paramResultPageCallback, this); } public void printBlackTag(Bitmap paramBitmap, int paramInt, ResultPageCallback<Integer> paramResultPageCallback) { OnDoPrintCallback onDoPrintCallback = (paramInt2, paramResultCallback) -> printBlackTagOnce(paramBitmap, paramInt2, paramInt1, paramResultCallback); doPrint(paramBitmap, paramInt, paramResultPageCallback, this); } public void printTagOnce(Bitmap paramBitmap, int paramInt1, int paramInt2, ResultCallback<Integer> paramResultCallback) { enablePrinterLuck(); printerWakeupLuck(); if (this.isTagNeedAdjustPaper && paramInt1 == 1) adjustPositionAuto(81);  sendBitmap(paramBitmap); printerPositionLuck(); if (this.isTagNeedAdjustPaper && paramInt1 == paramInt2) adjustPositionAuto(80);
/*    */ 
/*    */     
/* 18 */     stopPrintJobLuck(paramResultCallback); } public void printBlackTagOnce(Bitmap paramBitmap, int paramInt1, int paramInt2, ResultCallback<Integer> paramResultCallback) { enablePrinterLuck(); printerWakeupLuck(); if (this.isTagNeedAdjustPaper && paramInt1 == 1) adjustPositionAuto(81);  sendBitmap(paramBitmap); printerPositionLuck(); if (this.isTagNeedAdjustPaper && paramInt1 == paramInt2) adjustPositionAuto(80);  stopPrintJobLuck(paramResultCallback); } @Deprecated public void printerInfoLuck(ResultCallback<PrinterAllParamData> paramResultCallback) { byte[] arrayOfByte; (arrayOfByte = new byte[3])[0] = 16; (new byte[3])[1] = -1; (new byte[3])[2] = 112; d.b().a(paramArrayOfbyte -> { if (paramResultCallback != null) if (paramArrayOfbyte != null) { PrinterAllParamData printerAllParamData; this(); String[] arrayOfString; if ((arrayOfString = byteToString(paramArrayOfbyte).split("\\|")).length == 2) { setSn(arrayOfString[0]); setBattery(arrayOfString[1]); } else if (arrayOfString.length == 3) { setSn(arrayOfString[1]); setBattery(arrayOfString[2]); } else if (arrayOfString.length == 4) { setVersion(arrayOfString[1]); setSn(arrayOfString[2]); setBattery(arrayOfString[3]); } else if (arrayOfString.length == 6) { setBluetoothName(arrayOfString[0]); setVersion(arrayOfString[3]); setSn(arrayOfString[4]); setBattery(arrayOfString[5]); } else if (arrayOfString.length == 11) { setBluetoothName(arrayOfString[0]); setVersion(arrayOfString[3]); setSn(arrayOfString[4]); setBattery(arrayOfString[10]); }  paramResultCallback.onSuccess(this); } else { paramResultCallback.onFail(); }   }this); } public void getTimeFormat(final ResultCallback<Integer> callback) { byte[] arrayOfByte; (arrayOfByte = new byte[3])[0] = 16; (new byte[3])[1] = -1; (new byte[3])[2] = -80; d.b().a(new ReadDataCallback() { public void onReadData(byte[] param1ArrayOfbyte) { ResultCallback resultCallback; if (param1ArrayOfbyte != null && param1ArrayOfbyte.length == 1) { if ((resultCallback = callback) != null) onSuccess(Integer.valueOf(param1ArrayOfbyte[0] & 0xFF));  } else if ((resultCallback = callback) != null) { onFail(); }  }
/*    */         },  arrayOfByte); } public void setTimeFormat(int paramInt, long paramLong, final ResultCallback<Integer> callback) { paramInt = (byte)paramInt; byte[] arrayOfByte2; (arrayOfByte2 = new byte[5])[0] = 16; (new byte[5])[1] = -1; (new byte[5])[2] = 83; (new byte[5])[3] = 74; (new byte[5])[4] = paramInt; byte[] arrayOfByte1 = combineData(arrayOfByte2, getTimeFormatData(paramLong)); d.b().a(new ReadDataCallback() { public void onReadData(byte[] param1ArrayOfbyte) { ResultCallback resultCallback; if ((resultCallback = callback) != null) if (param1ArrayOfbyte != null) { if (BaseNormalDevice.this.byteToString(param1ArrayOfbyte).startsWith("OK")) { callback.onSuccess(Integer.valueOf(1)); } else { callback.onFail(); }  } else { resultCallback.onFail(); }   }
/*    */         },  arrayOfByte1); } public void setMarkPrintLast() { byte[] arrayOfByte; (arrayOfByte = new byte[3])[0] = 27; (new byte[3])[1] = -69; (new byte[3])[2] = -69; d.b().a(null, this); }
/*    */   public int getUploadErrorCode(byte[] paramArrayOfbyte) { return UploadErrorCode.getUploadErrorCode(paramArrayOfbyte); }
/*    */   public void doPrint(Bitmap paramBitmap, int paramInt, ResultPageCallback<Integer> paramResultPageCallback, OnDoPrintCallback paramOnDoPrintCallback) { doPrintInner(paramBitmap, 1, paramInt, paramResultPageCallback, paramOnDoPrintCallback); }
/* 23 */   public void doPrintInner(Bitmap paramBitmap, int paramInt1, int paramInt2, ResultPageCallback<Integer> paramResultPageCallback, OnDoPrintCallback paramOnDoPrintCallback) { super(this, paramResultPageCallback, paramBitmap, paramInt1, paramInt2, paramOnDoPrintCallback); ResultCallback<Integer> resultCallback; if (paramBitmap != null && !paramBitmap.isRecycled()) { if (paramResultPageCallback != null) paramResultPageCallback
/*    */           
/* 25 */           .onPageIndexStart(paramBitmap, paramInt1, paramInt2);  paramOnDoPrintCallback
/*    */         
/* 27 */         .onDoPrint(paramInt1, resultCallback); }  } public void sendBitmap(Bitmap paramBitmap) { sendBitmap(paramBitmap, false); } public g getBitmapConvert(Bitmap paramBitmap, boolean paramBoolean) { return this.isCompress ? (() -> PrinterImageProcessor.getBitmapByteArrayCompress(paramBitmap, this.compressWay)) : (paramBoolean ? (() -> PrinterImageProcessor.getBitmapByteArrayGray(paramBitmap, 0, 4)) : (() -> PrinterImageProcessor.getBitmapByteArray(paramBitmap, 0))); } public void log(String paramString) { h.a(paramString); } public boolean isCompress() { return this.isCompress; } public void setCompress(boolean paramBoolean) { this.isCompress = paramBoolean; } public void setEnablePrinterMode(int paramInt) { this.enablePrinterMode = paramInt; } public void setTagNeedAdjustPaper(boolean paramBoolean) { this.isTagNeedAdjustPaper = paramBoolean; } public void setEndLineDot(int paramInt) { this.endLineDot = paramInt; } public int getEndLineDot() { return this.endLineDot; } public void setCompressWay(int paramInt) { this.compressWay = paramInt; } public int getCompressWay() { return this.compressWay; }
/* 28 */   public BaseNormalDevice() { this.enablePrinterMode = 3; this.endLineDot = 0; this.isCompress = false; this.isTagNeedAdjustPaper = false; this.compressWay = 0; setMinDensity(0); setMaxDensity(2); setSupportSetSpeed(false); if (getPrintWidth() != 384) { setEndLineDot(120); } else { setEndLineDot(80); }
/*    */      }
/*    */ 
/*    */   
/*    */   private byte[] combineData(byte[] paramArrayOfbyte1, byte[] paramArrayOfbyte2) {
/*    */     int i = paramArrayOfbyte1.length;
/*    */     System.arraycopy(paramArrayOfbyte1, 0, this, 0, i);
/*    */     i = paramArrayOfbyte1.length;
/*    */     int j = paramArrayOfbyte2.length;
/*    */     System.arraycopy(paramArrayOfbyte2, 0, this, i, j);
/*    */     byte[] arrayOfByte;
/*    */     return arrayOfByte = new byte[paramArrayOfbyte1.length + paramArrayOfbyte2.length];
/*    */   }
/*    */   
/*    */   private byte[] getTimeFormatData(long paramLong) {
/*    */     this(paramLong);
/*    */     Date date;
/*    */     Calendar.getInstance().setTime(this);
/*    */     byte b1 = (byte)(Calendar.getInstance().get(1) / 256);
/*    */     byte b2 = (byte)(Calendar.getInstance().get(1) % 256);
/*    */     byte b3 = (byte)(Calendar.getInstance().get(2) + 1);
/*    */     byte b4 = (byte)Calendar.getInstance().get(5);
/*    */     byte b5 = (byte)Calendar.getInstance().get(11);
/*    */     byte b6 = (byte)Calendar.getInstance().get(12);
/*    */     byte b7 = (byte)Calendar.getInstance().get(13);
/*    */     return new byte[] { b1, b2, b3, b4, b5, b6, b7 };
/*    */   }
/*    */   
/*    */   private void doSetPaperType(int paramInt1, int paramInt2, ReadDataCallback paramReadDataCallback) {
/*    */     byte b = (byte)paramInt1;
/*    */     paramInt1 = (byte)paramInt2;
/*    */     byte[] arrayOfByte;
/*    */     (arrayOfByte = new byte[4])[0] = 31;
/*    */     (new byte[4])[1] = Byte.MIN_VALUE;
/*    */     (new byte[4])[2] = b;
/*    */     (new byte[4])[3] = paramInt1;
/*    */     d.b().a(paramReadDataCallback, arrayOfByte);
/*    */   }
/*    */   
/*    */   public void sendBitmap(Bitmap paramBitmap, boolean paramBoolean) {
/*    */     sendBitmap(paramBitmap, null, paramBoolean, 3);
/*    */   }
/*    */   
/*    */   public void sendBitmap(Bitmap paramBitmap, ReadDataCallback paramReadDataCallback, boolean paramBoolean, int paramInt) {
/*    */     sendBitmap(null, paramBitmap, paramReadDataCallback, paramBoolean, paramInt);
/*    */   }
/*    */   
/*    */   public void sendBitmap(IReceiveDataClaud paramIReceiveDataClaud, Bitmap paramBitmap, ReadDataCallback paramReadDataCallback, boolean paramBoolean, int paramInt) {
/*    */     byte[] arrayOfByte;
/*    */     if ((arrayOfByte = PrintBitmapDataCache.getInstance().getBitmapCache(paramBitmap)) != null) {
/*    */       (d.b()).a.b(paramIReceiveDataClaud, arrayOfByte, paramReadDataCallback, paramInt);
/*    */       PrintBitmapDataCache.getInstance().removeBitmapCache(paramBitmap);
/*    */     } else {
/*    */       (d.b()).a.b(getBitmapConvert(paramBitmap, paramBoolean), paramIReceiveDataClaud, paramReadDataCallback, paramInt);
/*    */     } 
/*    */   }
/*    */   
/*    */   public int formatSetDensity(int paramInt) {
/*    */     return paramInt;
/*    */   }
/*    */   
/*    */   public int formatGetDensity(int paramInt) {
/*    */     return paramInt;
/*    */   } }


/* Location:              C:\Users\Omen\Downloads\app lucky printer\android-printing-sdk-demo-doc\android-printing-sdk-demo\app\libs\test\classes.jar!\com\luckprinter\sdk_new\device\normal\base\BaseNormalDevice.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */